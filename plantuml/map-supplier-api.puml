@startuml
left to right direction
hide empty members
set namespaceSeparator none

note as N1
  Name: <b><color:royalBlue>MapSupplier</color>
  Version: <b><color:royalBlue>0.0.2</color>
end note

 enum BasicWindDirection {
		 - N  
		 - NE  
		 - E  
		 - SE  
		 - S  
		 - SW  
		 - W  
		 - NW  
}

 enum ChopSize {
		 - N  
		 - S  
		 - M  
		 - H  
}

 enum CountryCode {
		 - PL  
		 - EN  
		 - ...  		 
}

 enum Depth {
		 - SHALLOW  
		 - DEEP  
}

class  Description {
		 - content <b>:String</b> 
		 - language <b>:CountryCode</b> 
}

 enum Difficulty {
		 - EASY  
		 - MEDIUM  
		 - HARD  
		 - PROS_ONLY  
}

class  MapSupplierResponse {
		 - matchedRectangle <b>:Rectangle</b> 
		 - pointIds <b>:PointId[]</b> 
		 - points <b>:PointDetails[]</b> 
}

 enum ObjectStatus {
		 - AVAILABLE  
		 - DRAFT  
		 - DECLINED  
}

 enum ObjectType {
		 - SPOT  
}

class  PointCoords {
		 - latitude <b>:Double</b> 
		 - longitude <b>:Double</b> 
}

class  PointDetails {
		 - cluster <b>:Boolean</b> 
		 - coords <b>:PointCoords</b> 
		 - distance <b>:Integer</b> 
		 - pointIds <b>:PointId[]</b> 
		 - <color:royalBlue>spot <b>:Spot</b>
}

class  PointId {
		 - objectId <b>:String</b> 
		 - objectType <b>:ObjectType</b> 
}

 enum Popularity {
		 - S  
		 - M  
		 - H  
}

class  Rectangle {
		 - pointA <b>:PointCoords</b> 
		 - pointB <b>:PointCoords</b> 
}

 enum SportType {
		 - WINDSURFING  
		 - KITESURFING  
		 - SURFING  
}

class  Spot {
		 
		 - chopSize <b>:ChopSize</b> 
		 - city <b>:String</b> 
		 - country <b>:CountryCode</b> 
		 - dangers <b>:String</b> 
		 - depth <b>:Depth</b> 
		 - descriptions <b>:Description[]</b> 
		 - difficulty <b>:Difficulty</b> 
		 - facilities <b>:SpotFacility[]</b> 
		 - id <b>:String</b> 
		 - liveCamera <b>:String[]</b> 
		 - name <b>:String</b> 
		 - photoUrls <b>:String[]</b> 
		 - popularity <b>:Popularity</b> 
		 - sportTypes <b>:SportType[]</b> 
		 - state <b>:String</b> 
		 - status <b>:ObjectStatus</b> 
		 - waterCurrent <b>:WaterCurrent</b> 
		 - waterType <b>:WaterType</b> 
		 - waveAvgPeriod <b>:Integer</b> 
		 - waveAvgSize <b>:Integer</b> 
		 - waveMaxSize <b>:Integer</b> 
		 - waveQuality <b>:Integer</b> 
		 - bestWindDirections <b>:BasicWindDirection[]</b> 
		 - worstWindDirections <b>:BasicWindDirection[]</b> 
}

class  SpotFilters {
		 - ids <b>:String[]</b> 
		 - status <b>:SpotStatus[]</b> 
		 - country <b>:CountryCode[]</b> 
		 - state <b>:String</b> 
		 - city <b>:String</b> 
		 - name <b>:String</b> 
		 - facilities <b>:SpotFacility[]</b> 
		 - difficulty <b>:Difficulty[]</b> 
		 - depth <b>:Depth[]</b> 
		 - sportTypes <b>:SportType[]</b> 
		 - waterType <b>:WaterType[]</b> 
		 - waveAvgPeriod <b>:IntegerRange</b> 
		 - waveAvgSize <b>:IntegerRange</b> 
}

 enum SpotFacility {
		 - SCHOOLS  
}

 enum WaterCurrent {
		 - N  
		 - S  
		 - M  
		 - H  
}

 enum WaterType {
		 - FLAT  
		 - WAVE  
}

abstract class MapQuery {
 - referenceLocation <b>:PointCoords</b> 
 - objectTypes <b>:ObjectType[]</b>
 - <color:royalBlue>spotFilters <b>:SpotFilters</b>
}

class RectangleMapQuery {
- rectangle <b>:Rectangle</b>
}

class CircleMapQuery {
- center <b>:PointCoords</b>
- radius <b>:Integer</b>
}

interface MapSupplierApi {
	 + <i>queryRectangle(RectangleMapQuery query)</i><b>:MapSupplierResponse</b> 
}

interface MapSupplierApi {
	 + <i>queryCircle(CircleMapQuery query)</i><b>:MapSupplierResponse</b> 
}

MapQuery <|-- RectangleMapQuery
MapQuery <|-- CircleMapQuery


MapSupplierResponse  *--   Rectangle 
MapSupplierResponse  *--   PointId 
MapSupplierResponse  *--   PointDetails 
PointDetails  *--   PointCoords 
PointDetails  *--   PointId 
PointDetails  *--   Spot 
Rectangle  *--   PointCoords 

Spot  *--   Description 


MapSupplierApi -->    RectangleMapQuery 
MapSupplierApi -->    CircleMapQuery 
MapSupplierApi -->    MapSupplierResponse 






@enduml