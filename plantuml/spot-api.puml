@startuml
hide empty members
set namespaceSeparator none

class  Spot {
		 - id <b>:String</b> 
		 - country <b>:CountryCode[]</b> 
		 - state <b>:String</b> 
		 - city <b>:String</b> 
		 - name <b>:String</b> 
		 - descriptions <b>:Description[]</b> 
		 - photoUrls <b>:String[]</b> 
		 - liveCamera <b>:String[]</b> 
		 - status <b>:SpotStatus[]</b> 
		 - sportTypes <b>:SportType[]</b> 
		 - waterType <b>:WaterType[]</b> 
		 - popularity <b>:Popularity[]</b> 
		 - facilities <b>:SpotFacility[]</b> 
		 - difficulty <b>:Difficulty[]</b> 
		 - depth <b>:Depth[]</b> 
		 - dangers <b>:String</b> 
		 - bestWindDirections <b>:BasicWindDirection[]</b> 
		 - worstWindDirections <b>:BasicWindDirection[]</b> 
		 - chopSize <b>:ChopSize[]</b> 
		 - waveQuality <b>:Integer</b> 
		 - waveAvgPeriod <b>:Integer</b> 
		 - waveAvgSize <b>:Integer</b> 
		 - waveMaxSize <b>:Integer</b> 
		 - waterCurrent <b>:WaterCurrent[]</b> 
}

class  SpotFilters {
		 - ids <b>:String[]</b> 
		 - status <b>:SpotStatus[]</b> 
		 - country <b>:CountryCode[]</b> 
		 - state <b>:String</b> 
		 - city <b>:String</b> 
		 - name <b>:String</b> 
		 - facilities <b>:SpotFacility[]</b> 
		 - difficulty <b>:Difficulty[]</b> 
		 - depth <b>:Depth[]</b> 
		 - sportTypes <b>:SportType[]</b> 
		 - waterType <b>:WaterType[]</b> 
		 - waveAvgPeriod <b>:IntegerRange[]</b> 
		 - waveAvgSize <b>:IntegerRange[]</b> 
}

class  Description {
		 - language <b>:CountryCode[]</b> 
		 - content <b>:String</b> 
}

 enum CountryCode {
		 - PL  
		 - EN  
		 - ...  		 
}

 enum SpotStatus {
		 - DRAFT  
		 - DECLINED  
		 - AVAILABLE  
}

 enum SportType {
		 - WINDSURFING  
		 - KITESURFING  
		 - SURFING  
}

 enum WaterType {
		 - FLAT  
		 - WAVE  
}

 enum Popularity {
		 - S  
		 - M  
		 - H  
}

 enum SpotFacility {
		 - SCHOOLS  
}

 enum Difficulty {
		 - EASY  
		 - MEDIUM  
		 - HARD  
		 - PROS_ONLY  
}

 enum Depth {
		 - SHALLOW  
		 - DEEP  
}

 enum BasicWindDirection {
		 - N  
		 - NE  
		 - E  
		 - SE  
		 - S  
		 - SW  
		 - W  
		 - NW  
}

 enum ChopSize {
		 - N  
		 - S  
		 - M  
		 - H  
}

 enum WaterCurrent {
		 - N  
		 - S  
		 - M  
		 - H  
}

class  IntegerRange {
		 - from <b>:Integer</b> 
		 - to <b>:Integer</b> 
}

class  PagedSpotResponse {
		 - spots <b>:Spot[]</b> 
		 - lastKey <b>:String</b> 
		 - limit <b>:Integer</b> 
		 - size <b>:Integer</b> 
}

class  SpotIdResponse {
		 - id <b>:String</b> 
}

class  SpotIdListResponse {
		 - ids <b>:String[]</b> 
}


interface SpotApi {
	 + <i>findSpots(Integer limit,String lastKey,SpotFilters filters)</i><b>:PagedSpotResponse</b> 
}

interface SpotApi {
	 + <i>putSpot(Number latitude,Number longitude,Spot spot)</i><b>:SpotIdResponse</b> 
}

interface SpotApi {
	 + <i>postSpot(Number latitude,Number longitude,Spot spot)</i><b>:SpotIdResponse</b> 
}

interface SpotApi {
	 + <i>getSpot(String id)</i><b>:Spot</b> 
}

interface SpotApi {
	 + <i>filterSpotIds(SpotFilters filters)</i><b>:SpotIdListResponse</b> 
}


Spot  *-- "1..*"  CountryCode 
Spot  *-- "0..*"  Description 
Spot  *-- "0..*"  SpotStatus 
Spot  *-- "0..*"  SportType 
Spot  *-- "0..*"  WaterType 
Spot  *-- "0..*"  Popularity 
Spot  *-- "0..*"  SpotFacility 
Spot  *-- "0..*"  Difficulty 
Spot  *-- "0..*"  Depth 
Spot  *-- "0..*"  BasicWindDirection 
Spot  *-- "0..*"  ChopSize 
Spot  *-- "0..*"  WaterCurrent 
SpotFilters  *-- "0..*"  SpotStatus 
SpotFilters  *-- "0..*"  CountryCode 
SpotFilters  *-- "0..*"  SpotFacility 
SpotFilters  *-- "0..*"  Difficulty 
SpotFilters  *-- "0..*"  Depth 
SpotFilters  *-- "0..*"  SportType 
SpotFilters  *-- "0..*"  WaterType 
SpotFilters  *-- "0..*"  IntegerRange 
Description  *-- "0..*"  CountryCode 
PagedSpotResponse  *-- "0..*"  Spot 
SpotApi -->    PagedSpotResponse 
SpotApi -->    SpotFilters 
SpotApi -->    SpotIdResponse 
SpotApi -->    Spot 
SpotApi -->    SpotIdListResponse 

note as N1
  Name: <b><color:royalBlue>spots</color>
  Version: <b><color:royalBlue>0.0.2</color>
end note


@enduml